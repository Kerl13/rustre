Ltac simpl_all u1 := repeat match goal with
| [ H: context[u1] |- _ ] => unfold u1 in H; simpl in H
end.

Ltac s h2 sinst1a sinst1b sc sd se  := match goal with
| [ |- _ /\ _] => split
| [H: _ /\ _ |- _] => destruct H
| [ |-  _ = sfby _ _] =>
  apply sext
| [ |-  _ = splus ?A ?B] =>
  apply sext
| [ |-  _ = sminus ?A ?B] =>
  apply sext
| [ |-  _ = sgt ?A ?B] =>
  apply sext
| [ |-  _ = seq ?A ?B] =>
  apply sext
| [ |-  _ = swhen ?A ?B] =>
  apply sext
| [ |-  _ = smerge _ _ _] =>
  apply sext
| [ |- forall n:nat, ?C] =>
    intros nk;
    pose (h2 nk) as nk2;
    try match goal with
    | [ |- context [S ?n]] => pose (h2 (S n)) as nk3
    end
| [ H : ?A = ?C, K : ?C = ?D |- ?A = ?D] => rewrite H; eauto
| [ H: context[get (splus _ _)] |- _] => rewrite splus_rw in H
| [ H: context[get (sconst _)] |- _] => rewrite sconst_rw in H
| [ |- context[get (sgt ?a ?b) ?n] ] =>
  let dec_bool := fresh "dec_bool" in
  pose (gt_dec (get a n) (get b n)) as dec_bool;
  let dec1 := fresh dec_bool in
  let dec2 := fresh dec_bool in
  destruct dec_bool as [dec1 | dec2];
  let c := fresh "c" in
  ((pose (sgt_rw_true a b n dec1) as c; clearbody c; rewrite c; clear c)
  || (pose (sgt_rw_false a b n dec2) as c; clearbody c; rewrite c; clear c))
| [ |- context[get (seq ?a ?b) ?n]] =>
  let dec_bool := fresh "dec_bool" in
  pose (Z.eq_dec (get a n) (get b n)) as dec_bool;
  let dec1 := fresh dec_bool in
  let dec2 := fresh dec_bool in
  destruct dec_bool as [dec1 | dec2];
  let c := fresh "c" in
  ((pose (seq_rw_true a b n dec1) as c; clearbody c; rewrite c; clear c)
  || (pose (seq_rw_false a b n dec2) as c; clearbody c; rewrite c; clear c))
| [ |- context[get (splus _ _) _]] => rewrite splus_rw
| [ |- context[get (sconst _) _]] => rewrite sconst_rw
| [ |- context[get (smerge ?a _ _) ?n]] =>
    let h := fresh "merge" in
    case_eq (get a n); [
    intro h; rewrite h in *; rewrite smerge_rw_true |
    intro h; rewrite h in *;  rewrite smerge_rw_false]
| [ |- context[get (swhen _ _)]] => rewrite swhen_rw
| [ |- context[get (sfby _ _) (O)]] => rewrite sfby_rw_o
| [ |- context[get (sfby _ _) (S _)]] => rewrite sfby_rw_s
| [ |- context[get (sfby _ _) ?n]] =>
  let n2 := fresh "n" in
  destruct n as [ _ | n2 ];
  let h2n := fresh "h2pn" in
  try pose (h2 n2) as h2n; try inversion h2n
| [ H: ?A <> ?B, H2: ?A = ?B -> ?C |- _ ] => clear H2
| [ H: ?A = ?B, H2: ?A <> ?B -> ?C |- _ ] => clear H2
| [ H : (?A = ?B -> ?C) /\ (?A <> ?B -> ?D) |- _ ] =>
  let h := fresh H in
  let h' := fresh H in
  destruct H as (h & h');
  let u := fresh "dec" in
  pose (Z.eq_dec A B) as u;
  let u1 := fresh u in
  let u2 := fresh u in
  destruct u as [u1 | u2];
  (let h'' := fresh h in
  pose (h u1) as h'';  clearbody h''; clear h) ||
  (let h'' := fresh h in
  pose (h' u2) as h''; clearbody h''; clear h)
| [ |- ?a <-> ?b ] => split; intro
| [ |- spec ?a ?b ?c] => apply valid with sinst1a sinst1b sc sd se
| [ |- context[reset_state]] => unfold reset_state
| [H: ?A -> _, H2:?A |- _] =>
  let h := fresh H in
  pose (H H2) as h;
  clearbody h;
  clear H
| [H: (?c = true) -> False |- _ ] =>
  let c2 := fresh "c" in
  case_eq c; intro c2; (destruct (H c2) || clear H)
end.

Ltac unfold_eq := match goal with
| [ H: ?A = ?E |- _] =>
  match E with
  | context[is_eq ?C ?D] =>
    let y := fresh "y" in
    pose (is_eq_def C D) as y;
    clearbody y;
    symmetry in H
    end
end.

Ltac simpl_pairs := repeat match goal with
| [ H: pair _ _ = pair _ _ |- _ ] => inversion H; clear H
end.

Ltac solve u1 h2 sinst1a sinst1b sc sd se := simpl_all u1; repeat (repeat (s h2 sinst1a sinst1b sc sd se); simpl_pairs; try congruence; unfold_eq).


inversion h1.

solve step_fonct_sem_full h2 sinst1a sinst1b sc sd se.



Lemma snot_rw2: forall (a:(stream bool)) (n:nat), ((get (snot a) n = negb (get a n))).
intros.
pose (snot_rw a n).
destruct i.
case_eq (get (snot a) n); intuition;
case_eq (get a n); intuition.
rewrite H2 in H0.
cut (false = true -> False).
intro.
pose (H0 H3).
rewrite e in H1.
inversion H1.
intro.
inversion H3.
Qed.
