module Types
  function is_eq (a:'a) (b:'a): bool = (a = b)

end

module Nodecheck
  use import int.Int
  use import int.ComputerDivision
  use import Types

  type state = { mutable a: bool; }
  function step_fonct (state:state) (x: bool): ((bool,
    bool), (), state) =
    let { a = state_a;  } = state in
    let a = state_a in

    let b = x in

    let state_a = x in
    ((a,  b), (), { a = state_a;  })

  function reset_state : state =
    let state_a = true in
    { a = state_a;  }

  let step (state:state) (x: bool): (bool,  bool)
    ensures { let ((a, b), _, sta) = step_fonct (old state) x in
    (a, b) = result /\
    state = sta } =
    let a = state.a in

    let b = x in

    state.a <- x;
    (a,  b)

  let reset (state:state): unit
    ensures { state = reset_state } =
    state.a <- true;
    ()

  lemma nil_ok: forall x: bool, init: bool.
    let reset_state_nil = { reset_state with a = init } in
    step_fonct reset_state x = step_fonct reset_state_nil x

end
