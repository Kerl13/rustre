/* main = pong */
/* Do not remove the line above */

type dir = Left + Right

/* Size of the arena */
const WIDTH = 1200
const HEIGHT = 400

/* Speed of the ball */
const DX = 2
const INITIAL_DY = 3

/* The paddle's spec */
const PADDLE_SIZE = 30
const PADDLE_SPEED = 3


/* Simple utilities */

node min(x, y : int) = (z : int)
with var gt : bool ; ok : bool in
  gt = x > y ;
  z = if gt then y else x ;
  ok = ((z = y) or (z = x)) and z <= x and z <= y

node abs(x : int) = (ax : int)
with var pos : bool ; ok : bool in
  pos = x >= 0 ;
  ax = if pos then x else (-x) ;
  ok = ax >= 0 and (ax = x or ax = -x)

node clamp(bound, v : int) = (w : int)
with var pos : bool ; ok : bool in
  pos = v >= 0 ;
  w = if pos
      then min(v, bound)
      else (-min(-v, bound)) ;
 ok = (bound >= 0) => (abs(w) <= abs(v) and abs(w) <= bound)


/* Movements of the ball */

node lat_move(x : int; aligned : bool) = (x2 : int; dir : dir; score : int)
with var r_overflow, l_overflow, goal_, ok : bool ; dx : int in
  r_overflow = dir = Right and x + DX >= WIDTH ;
  l_overflow = dir = Left and (x - DX) < 0 ;
  dir = Right fby ( if r_overflow then      Left
                    else if l_overflow then Right
                    else                    dir ) ;
  score = 0 fby (if goal_ then score + 1 else score) ;
  goal_ = r_overflow and not aligned ;
  dx = merge dir (Left  -> - DX when Left(dir))
                 (Right ->   DX when Right(dir)) ;
  x2 = if r_overflow then       2 * WIDTH - x - dx -1
       else if l_overflow then  -(x + dx)
       else                     x + dx ;
  ok = (dx = DX or dx = -DX) and ((0 <= x and x < WIDTH) =>
  (-1 < x2 and x2 < WIDTH))

node vert_move(y : int) = (y2, dy : int)
with var overflow_top, overflow_bot, overflow : bool ; ok : bool in
  overflow_top = y + dy >= HEIGHT and dy >= 0;
  overflow_bot = y + dy < 0 and dy < 0;
  overflow = overflow_bot or overflow_top ;
  y2 = if overflow_top then       2 * HEIGHT - y - dy - 1
       else if overflow_bot then  -(dy + y)
       else                       y + dy ;
  dy = INITIAL_DY fby (if overflow then (- dy) else dy) ;
  ok = (dy = INITIAL_DY or dy = -INITIAL_DY) and ((0 <= y and y < HEIGHT) =>
       (-(HEIGHT-1) <= dy and dy <= HEIGHT) =>
       (0 <= y2 and y2 < HEIGHT))


/* Movements of the paddle */

node paddle_move(target, pos : int) = (next_pos : int)
with
  next_pos = pos + clamp(PADDLE_SPEED, target - pos)

node target(x, y : int ; dir : dir ; dy : int) = (target : int)
with var virtual_y, abs_virtual_y, length : int ; in_bounds : bool ; gt, ok : bool in
  length = merge dir (Right -> WIDTH - x when Right(dir))
                     (Left  -> WIDTH + x when Left(dir)) ;
  virtual_y = (y + (length * dy) / DX) mod ((HEIGHT * 2) - 1) ;
  in_bounds = virtual_y < HEIGHT and virtual_y >= 1-HEIGHT ;
  gt = virtual_y >= 0;
  abs_virtual_y = if gt then virtual_y else -virtual_y;
  target = if in_bounds
           then abs_virtual_y
           else ((2*HEIGHT -1) - abs_virtual_y) ;
  ok = 0 <= target and target < HEIGHT and (true -> (
  (not (dir = Left and pre dir = Right)) =>
  (dir = Right => x = DX + pre x) =>
  (dir = Left => x = pre x - DX) =>
  (y = pre y + pre dy or y = - (pre y + pre dy) or y = 2*HEIGHT - (pre y + pre
  dy + 1)) =>
  target = pre target))

node aligned_with_paddle(y, paddle : int) = (yes : bool)
with
  yes = (y <= paddle + PADDLE_SIZE/2) and
        (y >= paddle - PADDLE_SIZE/2)


/* Main */

node dist_to_goal(x : int; dir : dir) = (d : int)
with
  d = merge dir (Right -> WIDTH - x when Right(dir))
                (Left  -> WIDTH + x when Left(dir))

node pong(wind : int) = (x, y : int; paddle : int; score : int)
with var xx, y2, dy, paddle2, target : int ;
         dir : dir ;
         /* Terms of the proof: */
         length, delta_y : int ;
         ok : bool
in
  (xx, dir, score) = lat_move(x, aligned_with_paddle(y, paddle)) ;
  x = 100 fby xx ;
  (y2, dy) = vert_move(y) ;
  y = 10 fby y2 ;
  target = target(x, y, dir, dy) ;
  paddle2 = paddle_move(target, paddle) ;
  paddle = 10 fby paddle2 ;
  /* Terms of the proof: */
  length = dist_to_goal(x, dir) ;
  delta_y = (length * abs(dy)) / DX ;
  ok =
  (0 <= x and x < WIDTH) and
  (-1 < xx and xx < WIDTH) and
(0 <= y and y < HEIGHT) and
       (-(HEIGHT-1) <= dy and dy <= HEIGHT) and (0 <= y2 and y2 < HEIGHT)
       and (x mod DX = 0)
/*    (PADDLE_SPEED * dist_to_goal(x, dir) >= abs(paddle - target) * DX)
    and (y >= target - delta_y and y <= target + delta_y)
    and (x mod DX = 0)*/
    /* and (score = 0) certainly difficult */
