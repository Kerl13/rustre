theory Stream

  use import int.Int
  use import bool.Bool
  type stream 'a
  type nat = O | S nat
  function get (stream 'a) nat: 'a

  function snot (stream bool): stream bool
  function sand (stream bool) (stream bool): stream bool
  function sor (stream bool) (stream bool): stream bool

  function splus (stream int) (stream int): stream int
  function sminus (stream int) (stream int): stream int
  function spre (stream 'a): stream 'a
  function sconst 'a: stream 'a
  function sgt (stream int) (stream int): stream bool
  function sif (stream bool) (stream 'a) (stream 'a): stream 'a
  function sfby 'a (stream 'a): stream 'a
  function seq (stream 'a) (stream 'a): stream bool
  function smerge (stream bool) (stream 'a) (stream 'a): stream 'a
  function swhen (stream bool) (stream 'a): stream 'a

  axiom sext: forall a, b: stream 'a.
    (forall n: nat. get a n = get b n) -> a = b

  axiom snot_rw: forall a, n. get (snot a) n = not (get a n)

  axiom splus_rw: forall a, b, n. get (splus a b) n = get a n + get b n

  axiom seq_rw_true: forall a, b:stream 'a, n. ((get a n) = (get b n)) -> get (seq a b) n = true
  axiom seq_rw_false: forall a, b:stream 'a, n. ((get a n) <> (get b n)) -> get (seq a b) n = false

  axiom sfby_rw_s: forall a:'a, b:stream 'a, n. get (sfby a b) (S n) = get b n
  axiom sfby_rw_o: forall a:'a, b:stream 'a. get (sfby a b) O = a

  axiom sconst_rw: forall c: 'a, n. get (sconst c) n = c
  axiom sminus_rw: forall a, b, n. get (sminus a b) n = get a n - get b n
  axiom sgt_rw_true: forall a, b, n. (get a n > get b n) -> get (sgt a b) n = true
  axiom sgt_rw_false: forall a, b, n. (not (get a n > get b n)) -> get (sgt a b) n = false
  axiom swhen_rw: forall a, b:stream 'a, n. get (swhen a b) n = get b n
  axiom smerge_rw_true: forall a, b, c:stream 'a, n.
    get a n ->
    get (smerge a b c) n = get b n
  axiom smerge_rw_false: forall a, b, c:stream 'a,  n.
    get a n = false ->
    get (smerge a b c) n = get c n

  lemma gt_dec: forall a: int, b:int. a > b \/ not (a > b)

end
