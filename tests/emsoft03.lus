/* Examples from the paper
   "clocks as first class abstract types", cola√ßo and pouzet, emsoft 2003 */

node sum (x: int) = (s: int)
with var ps : int in
  ps = 0 fby s;
  s = ps + x

node bounds (x: int) = (min, max: int)
with var vinit, x_lt_pre_min, x_gt_pre_max : bool;
         pre_min, pre_max : int in
  vinit = true fby false;
  pre_min = 0 fby min;
  pre_max = 0 fby max;
  x_lt_pre_min = x < pre_min ;
  x_gt_pre_max = x > pre_max ;
  min = if vinit then x
        else if x_lt_pre_min then x
        else pre_min;
  max = if vinit then x
        else if x_gt_pre_max then x
        else pre_max

node sample (n: int) = (ok: bool)
with var vinit, pre_cpt_nm1 : bool;
         cpt, pre_cpt : int
in
  vinit = true fby false;
  pre_cpt_nm1 = pre_cpt = n - 1;
  cpt = if vinit then 0
        else if pre_cpt_nm1 then 0
        else pre_cpt + 1;
  pre_cpt = 0 fby cpt;
  ok = (cpt = 0)

node count_down (vreset : bool; n : int) = (cpt : int)
with var vinit, reset_or_init : bool;
         pre_cpt : int
in
  vinit = true fby false;
  pre_cpt = 0 fby (cpt - 1);
  reset_or_init = vreset or vinit;
  cpt = if reset_or_init then n else pre_cpt

node check (rer_input : bool; numberofcycle : int) = (rer_output : bool)
with var clk, c, pre_rer_input, count : bool;
         v, pv : int;
         r : int
in
  rer_output = (0 < v) and (c or count);
  v = merge clk (True -> r)
                (False -> pv when False(clk));
  r = count_down (count when True(clk), numberofcycle when True(clk));
  pv = 0 fby v;
  c = false fby rer_output;
  clk = c or count;
  count = rer_input and not pre_rer_input;
  pre_rer_input = true fby rer_input
